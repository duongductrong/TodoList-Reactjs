{"version":3,"sources":["images/checkIcon.svg","images/checkIcon-completed.svg","images/deletedIcon.svg","images/checklist.svg","images/nextimg.svg","images/preimg.svg","images/trash.svg","images/sortimg.svg","images/facebook.svg","images/instagram.svg","components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","className","urlImage","onPage","TodoItems","props","CheckIcon","classNameRemove","this","items","name","isCompleted","CheckIconCompleted","onClick","clickedItem","src","deletedItem","DeletedIcon","Component","window","screen","width","App","StorageWorks","bind","state","todolists","JSON","parse","value","defaultCompleted","page","getPage","reset","addTodoItem","onChangeInput","done","isAll","isCheckCompleted","isActive","next","previous","clearStorageData","sortData","storage","localStorage","setItem","stringify","getItem","undefined","Storage","length","item","location","setState","map","val","index","writeStorage","event","lists","keyCode","target","disk","reverse","splice","completed","valueCompleted","push","valueActive","Math","ceil","clear","empty","start","end","slice","title","CheckList","type","placeholder","onChange","onKeyUp","maxLength","SortImg","key","handlingWork","PreImg","NextImg","TrashImg","href","FacebookImg","InstagramImg","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3e257da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkIcon.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkIcon-completed.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/deletedIcon.68406cb1.svg\";","module.exports = __webpack_public_path__ + \"static/media/checklist.9542ad95.svg\";","module.exports = __webpack_public_path__ + \"static/media/nextimg.268c9359.svg\";","module.exports = __webpack_public_path__ + \"static/media/preimg.d7b15e6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.54be10ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/sortimg.b8645f0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/facebook.23076a39.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram.5b23a837.svg\";","import React, {Component} from 'react'\r\nimport '../TodoItems.css'\r\nimport CheckIcon from '../images/checkIcon.svg'\r\nimport CheckIconCompleted from '../images/checkIcon-completed.svg'\r\nimport DeletedIcon from '../images/deletedIcon.svg'\r\nlet todolists = [];\r\n\r\nlet className;\r\nlet urlImage;\r\n\r\nclass TodoItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        urlImage = CheckIcon;\r\n        className = \"todo-lists__text\";\r\n        this.classNameRemove = \"todo-lists__remove\";\r\n        \r\n    }\r\n\r\n    render() {\r\n        const {name, isCompleted} = this.props.items;\r\n        // const {onClick} = this.props;\r\n        //Check danh sách todo nếu việc nào xong rồi (true) thì hiển thị check completed và icon done\r\n        if(isCompleted) {\r\n            urlImage = CheckIconCompleted;\r\n            className = `todo-lists__text todo-lists--completed`;\r\n            this.classNameRemove = `todo-lists__remove`;\r\n        }\r\n        else {\r\n            urlImage= CheckIcon;\r\n            className = `todo-lists__text`;\r\n            this.classNameRemove = `todo-lists__remove todo-lists--hide`;\r\n        }\r\n        return (\r\n            <div className=\"todo-lists__items\">\r\n                <img \r\n                    // onClick={this.handlingWork} \r\n                    onClick={this.props.clickedItem} src={urlImage} />\r\n                <p className={className}>{name}</p>\r\n                <img className={this.classNameRemove} onClick={this.props.deletedItem} src={DeletedIcon} />\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\nexport default TodoItems","import React, { Component } from 'react';\nimport TodoItems from './components/TodoItems.js'\nimport CheckList from './images/checklist.svg'\nimport NextImg from './images/nextimg.svg'\nimport PreImg from './images/preimg.svg'\nimport TrashImg from './images/trash.svg'\nimport SortImg from './images/sortimg.svg'\nimport FacebookImg from './images/facebook.svg'\nimport InstagramImg from './images/instagram.svg'\nimport './App.css';\n\nconst title = \"Todo Lists\";\n\nlet onPage;\n//Responsive with screen\nif(window.screen.width > 515) {\n    onPage = 6;\n}\nif(window.screen.width <= 515) {\n    onPage = 4;\n}\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.StorageWorks = this.StorageWorks.bind(this);\n        this.state = {\n            todolists: JSON.parse(this.StorageWorks()) || [],\n            value: '',\n            defaultCompleted: false,\n            page: this.getPage() || 1,\n            reset: false\n        }\n        \n        //Bind this.function\n        this.addTodoItem = this.addTodoItem.bind(this);\n        this.onChangeInput = this.onChangeInput.bind(this);\n        this.done = this.done.bind(this);\n        this.isAll = this.isAll.bind(this);\n        this.isCheckCompleted = this.isCheckCompleted.bind(this);\n        this.isActive = this.isActive.bind(this);\n        this.next = this.next.bind(this);\n        this.previous = this.previous.bind(this);\n        this.clearStorageData = this.clearStorageData.bind(this);\n        this.sortData = this.sortData.bind(this);\n    }\n    \n    //write data to storage \n    writeStorage(storage) {\n        localStorage.setItem(\"todolists\", JSON.stringify(storage));\n    }\n\n    //get number page\n    getPage() {\n        this.page = localStorage.getItem(\"page\");\n        if(this.page === \"\") {\n            localStorage.setItem(\"page\", JSON.stringify(1));\n            return 1;\n        }\n        this.page = JSON.parse(this.page);\n        if(this.page !== null && this.page !== undefined) {\n            return this.page;\n        }\n        else {\n            localStorage.setItem(\"page\", JSON.stringify(1));\n            return 1;\n        }\n    }\n\n    //check storage have the data or null\n    StorageWorks() {\n        if(typeof(Storage) !== undefined && window.localStorage.length > 0 && localStorage.getItem(\"todolists\")) {\n            return localStorage.getItem(\"todolists\");\n        }\n        else {\n            localStorage.setItem(\"todolists\", JSON.stringify([]))\n            return JSON.stringify([]); //JSON.Stringify\n        }\n    }\n\n    //the handling checking of user\n    handlingWork(item, location) {\n        const todolists = JSON.parse(localStorage.getItem(\"todolists\"));\n        \n        return () => {\n            this.setState({\n                todolists: todolists.map((val,index) => {\n                    if(val.name === item.name && index === location) {\n                        val.isCompleted = !val.isCompleted;\n                    }\n                    else {\n                        val.isCompleted = val.isCompleted;\n                    }\n                    return val;\n                })\n            });\n            this.writeStorage(todolists);\n        }\n    }\n    \n    //Add a new work for list\n    addTodoItem(event) {\n        let storage = [];\n        let lists = [];\n\n        if(event.keyCode === 13 && event.target.value !== \"\") {\n            if(localStorage.getItem(\"todolists\") !== null) {\n                lists = [...JSON.parse(localStorage.getItem(\"todolists\"))];\n            }\n            if(lists.length > 0) {\n                storage = [...lists];\n            }\n            this.item =  {name: event.target.value, isCompleted: false};\n            storage = [this.item, ...storage];\n            this.setState({\n                todolists: storage,\n                value: \"\"\n            });\n            \n            this.writeStorage(storage);\n        }\n    }\n    onChangeInput(event) {\n        this.setState({value: event.target.value});\n    }\n\n    //Check all done\n    done() {\n        this.disk = JSON.parse(localStorage.getItem(\"todolists\"));\n        \n        this.storage = this.disk.map((item) => {\n            item.isCompleted = !this.state.defaultCompleted;\n            return item;\n        });\n        \n        this.setState({\n            todolists: this.storage,\n            defaultCompleted: !this.state.defaultCompleted\n        })\n        this.writeStorage(this.storage);\n    }\n\n    //Convert list todo\n    sortData() {\n        this.storage = JSON.parse(localStorage.getItem(\"todolists\"));\n        this.reverse = this.storage.reverse();\n        this.setState({\n            todolists: this.reverse\n        });\n        \n        this.writeStorage(this.reverse)\n    }\n    //Delete\n    deletedItem(item, index) {\n        return() => {\n            this.storage = [...this.state.todolists];\n            this.storage.splice(index, 1);\n            this.setState({\n                todolists: this.storage\n            })\n\n            this.writeStorage(this.storage);\n        }\n    }\n    //Showall\n    isAll() {\n        this.completed = JSON.parse(localStorage.getItem(\"todolists\"));\n        this.setState({\n            todolists: this.completed\n        })\n    }\n    //Show completed\n    isCheckCompleted() {\n        this.storage = JSON.parse(localStorage.getItem(\"todolists\"));\n        this.valueCompleted = [];\n        this.storage.map((val) => {\n            if(val.isCompleted === true) {\n                this.valueCompleted.push(val);\n            }\n        })\n        this.setState({\n            todolists: this.valueCompleted\n        })\n    }\n    //show data activing\n    isActive() {\n        this.storage = JSON.parse(localStorage.getItem(\"todolists\"));\n        this.valueActive = [];\n        this.storage.map((val) => {\n            if(val.isCompleted === false) {\n                this.valueActive.push(val);\n            }\n        })\n        this.setState({\n            todolists: this.valueActive\n        })\n    }\n\n    //next page\n    next() {\n        if(this.state.page < Math.ceil(this.state.todolists.length/onPage)) {\n            this.setState({\n                page: ++this.state.page\n            });\n        }\n        localStorage.setItem(\"page\", this.state.page);\n    }\n\n    //previous page\n    previous() {\n        if(this.state.page > 1) {\n            this.setState({\n                page: --this.state.page\n            });\n        }\n        localStorage.setItem(\"page\", this.state.page);\n    }\n    \n    //clear all data in storage\n    clearStorageData() {\n        localStorage.clear();\n        this.empty = []\n\n        this.setState({\n            todolists: this.empty\n        });\n        localStorage.setItem(\"todolists\", JSON.stringify(this.empty));\n    }\n\n    render() {\n        var { todolists, value } = this.state;\n        //Pagination list\n        this.start = (this.state.page - 1) * onPage;\n        this.end = (this.state.page - 1) * onPage + onPage;\n        todolists = todolists.slice(this.start, this.end);\n        \n        return (\n            <div className=\"App\">\n                <header className=\"header\">\n                    <h1 className=\"header__title\">{title}</h1>\n                    <ul className=\"header__select\">\n                        <li><button onClick={this.isAll} className=\"header__option\">All</button></li>\n                        <li><button onClick={this.isActive} className=\"header__option\">Active</button></li>\n                        <li><button onClick={this.isCheckCompleted} className=\"header__option\">Completed</button></li>\n                    </ul>\n                </header>\n                \n                <section className=\"todo-lists\">\n                    <div className=\"todo-lists__processingType\">\n                        <img onClick={this.done} className=\"todo-lists__processingType__image\" title=\"Check all\" src={CheckList} />\n                        <span className=\"todo-lists__note\">Đảo ngược</span>\n                        <input \n                            className=\"todo_lists__type\" \n                            type=\"text\" \n                            placeholder=\"Add task . . .\"\n                            value={value}\n                            onChange={this.onChangeInput}\n                            onKeyUp={this.addTodoItem}\n                            maxLength=\"60\"\n                        />\n                        <img onClick={this.sortData} className=\"todo-lists__sort\" src={SortImg} title=\"Đảo ngược\" />\n                        <span className=\"todo-lists__note\">Đảo ngược</span>\n                    </div>\n\n                    { todolists.length > 0 && todolists.map((val, index) => \n                        <TodoItems \n                            key={index} \n                            items={val} \n                            clickedItem={this.handlingWork(val, ((this.state.page - 1) * 6) + index)} \n                            deletedItem={this.deletedItem(val, ((this.state.page - 1) * 6) + index)}\n                        />)\n                    }\n                    {\n                        todolists.length === 0 && <div className=\"todo-lists__no-work\">No work has been added yet</div>\n                    }\n                </section>\n                <footer className=\"footer\">\n                    <div className=\"pagination\">\n                        <img onClick={this.previous} className=\"pagination__pre\" src={PreImg}/>\n                        <button className=\"pagination__page\">{this.state.page}</button>\n                        <img onClick={this.next} className=\"pagination__next\" src={NextImg}/>\n                    </div>\n                    <div className=\"clear-todolists\">\n                        <span className=\"clear-todolists__text\">Cle\n                            <img onClick={this.clearStorageData} className=\"clear-todolists__trash\"title=\"clear data\" src={TrashImg} />\n                        ar</span>\n                    </div>\n                    <div className=\"the-page\">\n                        {`${this.state.page}/${Math.ceil(this.state.todolists.length/onPage)}`}\n                    </div>\n                    <div className=\"mysocial\">\n                        <a href=\"https://www.facebook.com/trong.duong.77398\" target=\"_blank\"><img className=\"mysocial__img\" src={FacebookImg} /></a>\n                        <a href=\"https://www.instagram.com/duongductrong06/\" target=\"_blank\"><img className=\"mysocial__img\" src={InstagramImg} /></a>\n                    </div>\n                </footer>\n            </div>\n        )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}